000000_00000_00000_0000000000001010 //       XOR     r0,     r0,    r0    # ゼロレジスタの用意
000001_00000_01000_0000000000000000 //       ADDI    r8,     r0,    0     # 変数iの用意
000001_00000_01010_0000001000000000 //       ADDI    r10,    r0,    512   # 要素を100個持つ配列変数flagを用意                                   # 配列変数flagのアドレスを初期化
000001_00000_01110_0000000000000001 //       ADDI    r14,    r0,    1     # 配列変数flagの要素を初期化する定数
000001_00000_01000_0000000000000000 //       ADDI    r8,     r0,    0     # i = 0の変換
000001_00000_11000_0000000110010000 //       ADDI    r24,    r0,    400   # iの上限となる定数
100011_11000_01000_0000000000010000 // FOR0S:BLE     r24,    r8,    FOR0E # flagの全要素を1（true）に初期化                                     # for (i = 0; i < 100; i++)      # i < 100（100 <= i）の変換
000000_01000_01010_0111100000000000 //       ADD     r15,    r8,    r10   # forブロック内
011000_01111_01110_0000000000000000 //       SW      r14,    0(r15)
000001_01000_01000_0000000000000100 //       ADDI    r8,     r8,    4     # i++の変換
101000_00000_00000_0000000000011000 //       J       FOR0S
011000_01010_00000_0000000000000000 // FOR0E:SW      r0,     0(r10)       # flag[0]とflag[1]に0を代入
011000_01010_00000_0000000000000100 //       SW      r0,     4(r10)
000001_00000_01001_0000000000000010 //       ADDI    r9,     r0,    2     # 判定用の変数divを用意して1ずつ加算、flag[divのi（ > 1）倍]に0を代入 # div = 2の変換
000001_00000_11001_0000000000110011 //       ADDI    r25,    r0,    51    # divの上限となる定数
100011_11001_01001_0000000001000100 // FOR1S:BLE     r25,    r9,    FOR1E # for (div = 2; div < 51; div++)                                      # divが50を超えた場合は判定終了  # div < 51（51 <= div）の変換
000000_01001_00000_01110_00010_0_10000 //       SLL     r14,    r9,    2     # divのforブロック内                                                  # シフト演算で4倍
000000_01010_01110_0111100000000000 //       ADD     r15,    r10,    r14
010000_01111_01011_0000000000000000 //       LW      r11,    0(r15)
100001_00000_01011_0000000000001000 //       BNE     r0,     r11,    IF0E # if (flag[div] == 0)
000001_01001_01001_0000000000000001 //       ADDI    r9,     r9,    1     # ifブロック内
101000_00000_00000_0000000000111100 //       J       FOR1S
000000_01001_00000_01110_00011_0_10000 // IF0E: SLL     r14,    r9,    3      # i = div * 2の変換（アドレスのためさらに4倍）
000000_00000_01110_0100000000000000 //       ADD     r8,     r0,    r14
000001_00000_11000_0000000110010000 //       ADDI    r24,    r0,    400   # iの上限となる定数
100011_11000_01000_0000000000010100 // FOR2S:BLE     r24,    r8,    FOR2E # for (i = div * 2; i < 100; i = i + div)                             # i < 100（100 <= i）の変換
000000_01000_01010_0111100000000000 //       ADD     r15,    r8,    r10   # forブロック内
011000_01111_00000_0000000000000000 //       SW      r0,     0(r15)
000000_01001_00000_0111000010010000 //       SLL     r14,    r9,    2     # i = i + divの変換（アドレスのため4倍）
000000_01000_01110_0100000000000000 //       ADD     r8,     r8,    r14
101000_00000_00000_0000000001100100 //       J       FOR2S
000001_01001_01001_0000000000000001 // FOR2E:ADDI    r9,     r9,    1     # div++の変換
101000_00000_00000_0000000000111100 //       J       FOR1S
000001_00000_01000_0000000000001000 // FOR1E:ADDI    r8,     r0,    8     # 素数をメモリに保存                                                  # i = 0の変換
000001_00000_11000_0000000110010000 //       ADDI    r24,    r0,    400   # iの上限となる定数
100011_11000_01000_0000000000100000 // FOR3S:BLE     r24,    r8,    FOR3E # for (i = 2; i < 100; i++)                                           # i < 100（100 <= i）の変換
000000_01000_01010_0111100000000000 //       ADD     r15,    r8,    r10   # iのforブロック内
010000_01111_01011_0000000000000000 //       LW      r11,    0(r15)
100000_00000_01011_0000000000001100 //       BEQ     r0,     r11,    IF1E # if (flag[div] != 0)
000000_01000_00000_0111000010010010 //       SRA     r14,    r8,    2     # ifブロック内                                                        # シフト演算で1/4
000000_01000_01010_0111100000000000 //       ADD     r15,    r8,    r10
011000_01111_01110_0000000000000000 //       SW      r14,    0(r15)
000001_01000_01000_0000000000000100 // IF1E: ADDI    r8,     r8,    4      # i++の変換
101000_00000_00000_0000000010001100 //       J       FOR3S
111111_00000_00000_0000000000000000 // FOR3E:HALT
